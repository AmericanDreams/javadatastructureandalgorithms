public interface Deque<E>
extends Queue<E>

A linear collection that supports element insertion and removal at both ends. The name deque is short for "double ended queue" and
is usually pronounced "deck". Most Deque implementations place no fixed limits on the number of elements they may contain, but this interface
supports capacity-restricted deques as well as those with no fixed size limit.
This interface defines methods to access the elements at both ends of the deque. Methods are provided to insert, remove, and examine
the element. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value
(either null or false, depending on the operation). The latter form of the insert operation is designed specifically for use with
capacity-restricted Deque implementations; in most implementations, insert operations cannot fail.

The twelve methods described above are summarized in the following table:

	            First Element (Head)	            Last Element (Tail)
                Throws exception	Special value	Throws exception	Special value
Insert	        addFirst(e)	        offerFirst(e)	addLast(e)	        offerLast(e)
Remove	        removeFirst()	    pollFirst()	    removeLast()	    pollLast()
Examine	        getFirst()	        peekFirst()	    getLast()	        peekLast()

This interface extends the Queue interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results. Elements are
added at the end of the deque and removed from the beginning. The methods inherited from the Queue interface are precisely equivalent
to Deque methods as indicated in the following table:


Queue Method	    Equivalent Deque Method
add(e)	            addLast(e)
offer(e)	        offerLast(e)
remove()	        removeFirst()
poll()	            pollFirst()
element()	        getFirst()
peek()	            peekFirst()


Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy Stack class.
When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent
to Deque methods as indicated in the table below:


Stack Method	    Equivalent Deque Method
push(e)	            addFirst(e)
pop()	            removeFirst()
peek()	            peekFirst()


Note that the peek method works equally well when a deque is used as a queue or a stack; in either case, elements are drawn from the
beginning of the deque.

This interface provides two methods to remove interior elements, removeFirstOccurrence and removeLastOccurrence.

Unlike the List interface, this interface does not provide support for indexed access to elements.

While Deque implementations are not strictly required to prohibit the insertion of null elements, they are strongly encouraged to do so.
Users of any Deque implementations that do allow null elements are strongly encouraged not to take advantage of the ability to insert nulls.
This is so because null is used as a special return value by various methods to indicated that the deque is empty.

Deque implementations generally do not define element-based versions of the equals and hashCode methods, but instead inherit the
identity-based versions from class Object.

As we see Deque implements Queue interface that is why practically all Deque are also Queue.

Lets look at Deque implementations in java.

ArrayDeque

Resizable-array implementation of the Deque interface. Array deques have no capacity restrictions; they grow as necessary to support usage.
They are not thread-safe; in the absence of external synchronization, they do not support concurrent access by multiple threads. Null elements
are prohibited. This class is likely to be faster than Stack when used as a stack, and faster than LinkedList when used as a queue.
Most ArrayDeque operations run in amortized constant time. Exceptions include remove, removeFirstOccurrence, removeLastOccurrence, contains,
iterator.remove(), and the bulk operations, all of which run in linear time.

The iterators returned by this class's iterator method are fail-fast: If the deque is modified at any time after the iterator is created, in
any way except through the iterator's own remove method, the iterator will generally throw a ConcurrentModificationException. Thus, in the
face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an
undetermined time in the future.

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees
in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis.
Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators
should be used only to detect bugs.

This class and its iterator implement all of the optional methods of the Collection and Iterator interfaces.

This class is a member of the Java Collections Framework.


ConcurrentLinkedDeque

An unbounded concurrent deque based on linked nodes. Concurrent insertion, removal, and access operations execute safely across multiple
threads. A ConcurrentLinkedDeque is an appropriate choice when many threads will share access to a common collection. Like most other
concurrent collection implementations, this class does not permit the use of null elements.
Iterators are weakly consistent, returning elements reflecting the state of the deque at some point at or since the creation of the iterator.
They do not throw ConcurrentModificationException, and may proceed concurrently with other operations.

Beware that, unlike in most collections, the size method is NOT a constant-time operation. Because of the asynchronous nature of these deques,
determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection
is modified during traversal. Additionally, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not
guaranteed to be performed atomically. For example, an iterator operating concurrently with an addAll operation might view only some of the
added elements.

This class and its iterator implement all of the optional methods of the Deque and Iterator interfaces.

Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a ConcurrentLinkedDeque
happen-before actions subsequent to the access or removal of that element from the ConcurrentLinkedDeque in another thread.

This class is a member of the Java Collections Framework.

LinkedBlockingDeque

An optionally-bounded blocking deque based on linked nodes.
The optional capacity bound constructor argument serves as a way to prevent excessive expansion. The capacity, if unspecified,
is equal to Integer.MAX_VALUE. Linked nodes are dynamically created upon each insertion unless this would bring the deque above capacity.

Most operations run in constant time (ignoring time spent blocking). Exceptions include remove, removeFirstOccurrence,
removeLastOccurrence, contains, iterator.remove(), and the bulk operations, all of which run in linear time.

This class and its iterator implement all of the optional methods of the Collection and Iterator interfaces.

This class is a member of the Java Collections Framework.


And LinkedList
Yes Linked is Deque

Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements
(including null).
All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the
list from the beginning or the end,
whichever is closer to the specified index.














